{"ast":null,"code":"var _jsxFileName = \"/Users/miyashota/project/graphQL/client/src/components/MovieList.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Card, CardBody, Table } from \"reactstrap\";\nimport { MOVIE_LIST } from \"../queries/query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieList = () => {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(MOVIE_LIST);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 10\n    }, this);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"error!!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 10\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u30BF\\u30A4\\u30C8\\u30EB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 21,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u30B8\\u30E3\\u30F3\\u30EB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"\\u76E3\\u7763\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: data.movies.map((id, name, genre, director) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: genre\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: director.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 31,\n                columnNumber: 10\n              }, this)]\n            }, id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 9\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 4\n    }, this);\n  }\n};\n\n_s(MovieList, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = MovieList;\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["/Users/miyashota/project/graphQL/client/src/components/MovieList.jsx"],"names":["React","useQuery","Card","CardBody","Table","MOVIE_LIST","MovieList","loading","error","data","movies","map","id","name","genre","director"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,QAAsC,YAAtC;AAEA,SAASC,UAAT,QAA2B,kBAA3B;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACvB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BR,QAAQ,CAACI,UAAD,CAAzC;;AAEA,MAAIE,OAAJ,EAAa;AACZ,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,GAFD,MAEO,IAAIC,KAAJ,EAAW;AACjB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,GAFM,MAEA;AACN,wBACC,QAAC,IAAD;AAAA,6BACC,QAAC,QAAD;AAAA,+BACC,QAAC,KAAD;AAAO,UAAA,KAAK,MAAZ;AAAA,kCACC;AAAA,mCACC;AAAA,sCACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,kBADD,eAQC;AAAA,sBACEC,IAAI,CAACC,MAAL,CAAYC,GAAZ,CAAgB,CAACC,EAAD,EAAKC,IAAL,EAAWC,KAAX,EAAkBC,QAAlB,kBAChB;AAAA,sCACC;AAAA,0BAAKF;AAAL;AAAA;AAAA;AAAA;AAAA,sBADD,eAEC;AAAA,0BAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,sBAFD,eAGC;AAAA,0BAAKC,QAAQ,CAACF;AAAd;AAAA;AAAA;AAAA;AAAA,sBAHD;AAAA,eAASD,EAAT;AAAA;AAAA;AAAA;AAAA,oBADA;AADF;AAAA;AAAA;AAAA;AAAA,kBARD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YADD;AAwBA;AACD,CAjCD;;GAAMN,S;UAC4BL,Q;;;KAD5BK,S;AAmCN,eAAeA,SAAf","sourcesContent":["import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { Card, CardBody, Table } from \"reactstrap\";\n\nimport { MOVIE_LIST } from \"../queries/query\";\n\nconst MovieList = () => {\n\tconst { loading, error, data } = useQuery(MOVIE_LIST);\n\n\tif (loading) {\n\t\treturn <p>loading...</p>;\n\t} else if (error) {\n\t\treturn <p>error!!!</p>;\n\t} else {\n\t\treturn (\n\t\t\t<Card>\n\t\t\t\t<CardBody>\n\t\t\t\t\t<Table hover>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>タイトル</th>\n\t\t\t\t\t\t\t\t<th>ジャンル</th>\n\t\t\t\t\t\t\t\t<th>監督</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{data.movies.map((id, name, genre, director) => (\n\t\t\t\t\t\t\t\t<th key={id}>\n\t\t\t\t\t\t\t\t\t<td>{name}</td>\n\t\t\t\t\t\t\t\t\t<td>{genre}</td>\n\t\t\t\t\t\t\t\t\t<td>{director.name}</td>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</Table>\n\t\t\t\t</CardBody>\n\t\t\t</Card>\n\t\t);\n\t}\n};\n\nexport default MovieList;\n"]},"metadata":{},"sourceType":"module"}